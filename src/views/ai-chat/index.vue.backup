<template>
  <div class="ai-chat-container">
    <!-- 聊天头部 -->
    <div class="chat-header">
      <div class="header-content">
        <div class="title-section">
          <i class="el-icon-chat-dot-round" />
          <h2>智能餐饮管理助手</h2>
        </div>
        <div class="status-section">
          <!-- <el-badge :value="messageCount" class="message-badge">
            <i class="el-icon-message"></i>
          </el-badge> -->
          <span class="online-status">
            <i class="status-dot" />
            在线
          </span>
        </div>
      </div>
    </div>

    <!-- 聊天主体区域 -->
    <div class="chat-body">
      <!-- 消息展示区 -->
      <div ref="messagesContainer" class="messages-container">
        <div v-if="messages.length === 0" class="welcome-message">
          <div class="welcome-icon">
            <i class="el-icon-service" />
          </div>
          <h3>欢迎使用智能餐饮管理助手</h3>
          <p>我可以帮助您解答各种问题，请在下方输入您的问题开始对话</p>
          <div class="quick-questions">
            <el-tag
              v-for="(question, index) in quickQuestions"
              :key="index"
              class="quick-question-tag"
              @click="selectQuickQuestion(question)"
            >
              {{ question }}
            </el-tag>
          </div>
        </div>

        <!-- 消息列表 -->
        <div v-for="(message, index) in messages" :key="index" class="message-item">
          <!-- 用户消息 -->
          <div v-if="message.type === 'user'" class="message user-message">
            <div class="message-content">
              <div class="message-bubble user-bubble">
                {{ message.content }}
              </div>
              <div class="message-time">
                {{ formatTime(message.timestamp) }}
              </div>
            </div>
            <div class="message-avatar">
              <el-avatar size="small" icon="el-icon-user-solid" />
            </div>
          </div>

          <!-- AI消息 -->
          <div v-if="message.type === 'ai'" class="message ai-message">
            <div class="message-avatar">
              <el-avatar size="small" icon="el-icon-cpu" style="background-color: #FFC200" />
            </div>
            <div class="message-content">
              <div class="message-bubble ai-bubble">
                <div v-if="message.loading" class="typing-indicator">
                  <span class="typing-dot" />
                  <span class="typing-dot" />
                  <span class="typing-dot" />
                </div>
                <div v-else>
                  <!-- 根据responseType显示不同内容 -->
                  <div v-if="!message.responseType || message.responseType === 'text'" class="text-content">
                    {{ message.content }}
                  </div>
                  <div v-else-if="message.responseType === 'table'" class="table-content">
                    <!-- 使用新的订单表格组件 -->
                    <OrderTable
                      v-if="message.tableData && message.tableData.length > 0"
                      :table-data="message.tableData"
                      :title="message.tableTitle || '订单列表'"
                      :pagination="message.pagination"
                      :show-operations="false"
                      :max-height="250"
                      @view-detail="handleViewOrderDetail"
                    />

                    <!-- 降级显示原始数据 -->
                    <div v-else class="table-placeholder">
                      <i class="el-icon-s-grid" />
                      <p>表格数据显示</p>
                      <div class="raw-data">{{ message.content }}</div>
                    </div>
                  </div>
                  <div v-else-if="message.responseType === 'echart'" class="chart-content">
                    <div class="chart-placeholder">
                      <i class="el-icon-data-line" />
                      <p>图表数据显示（待实现）</p>
                      <div class="raw-data">
                        {{ message.content }}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
              <div class="message-time">
                {{ formatTime(message.timestamp) }}
              </div>
              <div v-if="!message.loading && message.content" class="message-actions">
                <el-button size="mini" type="text" @click="copyMessage(message.content)">
                  <i class="el-icon-document-copy" />
                  复制
                </el-button>
                <el-button size="mini" type="text" @click="likeMessage(message)">
                  <i class="el-icon-thumb" />
                  有用
                </el-button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 输入区域 -->
    <div class="chat-input">
      <div class="input-wrapper">
        <el-input
          v-model="currentMessage"
          placeholder="请输入您的问题，按 Enter 发送，Shift + Enter 换行..."
          type="textarea"
          :rows="1"
          :autosize="{ minRows: 1, maxRows: 4 }"
          :disabled="isLoading"
          class="message-input"
          @keydown.native="handleKeydown"
        />
        <div class="input-actions">
          <el-button
            size="small"
            type="text"
            title="清空对话"
            @click="clearChat"
          >
            <i class="el-icon-delete" />
          </el-button>
          <el-button
            type="primary"
            size="small"
            :loading="isLoading"
            :disabled="!currentMessage.trim()"
            @click="sendMessage"
          >
            <i class="el-icon-s-promotion" />
            发送
          </el-button>
        </div>
      </div>
    </div>
  </div>
</template>

<script lang="ts">
import { Component, Vue } from 'vue-property-decorator'
import { sendMessageToAI, getChatHistory, createConversation, clearChatHistory } from '@/api/ai-chat'
import OrderTable from './components/orderTable.vue'

interface Message {
  id: string
  type: 'user' | 'ai'
  content: string
  timestamp: Date
  loading?: boolean
  responseType?: 'text' | 'table' | 'echart'
  // 新增表格相关字段
  tableData?: any[]
  tableTitle?: string
  pagination?: {
    total: number
    current: number
    pageSize: number
  }
}

@Component({
  name: 'AiChat',
  components: {
    OrderTable
  }
})
export default class AiChat extends Vue {
  private currentMessage: string = ''
  private messages: Message[] = []
  private isLoading: boolean = false
  private messageCount: number = 0
  private currentConversationId: string = ''

  private quickQuestions: string[] = [
    '今天的营业数据如何？',
    '待接单的订单？',
    '如何提高客户满意度？',
    '库存管理建议',
    '你好'
  ]

  private selectQuickQuestion(question: string) {
    this.currentMessage = question
    this.sendMessage()
  }

  private async sendMessage() {
    if (!this.currentMessage.trim() || this.isLoading) return

    const userMessage: Message = {
      id: Date.now().toString(),
      type: 'user',
      content: this.currentMessage.trim(),
      timestamp: new Date()
    }

    this.messages.push(userMessage)
    this.messageCount++

    const messageToSend = this.currentMessage.trim()
    this.currentMessage = ''

    // 添加AI加载消息
    const aiMessage: Message = {
      id: (Date.now() + 1).toString(),
      type: 'ai',
      content: '',
      timestamp: new Date(),
      loading: true
    }
    this.messages.push(aiMessage)
    this.isLoading = true

    // 滚动到底部
    this.$nextTick(() => {
      this.scrollToBottom()
    })

    try {
      // 调用真实的AI API
      await this.sendMessageToAI(messageToSend, aiMessage)
    } catch (error) {
      console.error('AI响应错误:', error)
      aiMessage.content = '抱歉，我现在无法处理您的请求，请稍后再试。'
      aiMessage.loading = false
    } finally {
      this.isLoading = false
    }
  }

  private async sendMessageToAI(message: string, aiMessage: Message) {
    try {
      // 准备API请求参数 - 只发送用户消息和会话ID
      const requestParams = {
        message: message,
        conversationId: this.currentConversationId || undefined
      }

      // 调用API发送消息
      const response = await sendMessageToAI(requestParams)
      console.log('AI API响应:', response)
      if (response.data.code === 1) {
        // 成功获取AI回复 - 更新处理新的数据结构
        aiMessage.content = response.data.data
        aiMessage.responseType = response.data.type || 'text'

        // 如果是表格类型，解析数据
        if (response.data.type === 'table') {
          try {
            // 检查 data 是否已经是对象
            let tableData = response.data.data

            // 如果是字符串，则解析为 JSON
            if (typeof tableData === 'string') {
              tableData = JSON.parse(tableData)
            }

            // 处理表格数据
            if (tableData && tableData.pageResult && tableData.pageResult.records) {
              aiMessage.tableData = tableData.pageResult.records
              aiMessage.tableTitle = tableData.title || '订单列表'
              aiMessage.pagination = {
                total: tableData.pageResult.total || 0,
                current: tableData.pageResult.current || 1,
                pageSize: tableData.pageResult.size || 10
              }
            } else {
              console.warn('表格数据格式不正确:', tableData)
              // 如果数据格式不正确，降级为文本显示
              aiMessage.responseType = 'text'
            }
          } catch (parseError) {
            console.error('解析表格数据失败:', parseError)
            // 如果解析失败，降级为文本显示
            aiMessage.responseType = 'text'
          }
        }

        // 更新会话ID
        if (response.data.conversationId) {
          this.currentConversationId = response.data.conversationId
        }
      } else {
        // API返回错误
        aiMessage.content = response.data.msg || '抱歉，我现在无法处理您的请求。'
        aiMessage.responseType = 'text'
      }
    } catch (error) {
      console.error('API调用失败:', error)

      // 使用智能回复作为降级方案
      aiMessage.content = this.getSmartReply(message)
      aiMessage.responseType = 'text'
    } finally {
      aiMessage.loading = false
      this.messageCount++

      this.$nextTick(() => {
        this.scrollToBottom()
      })
    }
  }

  // 智能回复降级方案
  private getSmartReply(message: string): string {
    if (message.includes('营业') || message.includes('数据')) {
      return '抱歉，我暂时无法获取实时营业数据。请直接查看系统报表或联系技术支持。'
    } else if (message.includes('菜品') || message.includes('受欢迎')) {
      return '关于菜品统计，建议您查看菜品管理页面的销量排行，或联系店长获取详细信息。'
    } else if (message.includes('满意度') || message.includes('客户')) {
      return '提高客户满意度的建议：1. 优化出餐速度；2. 保证食材新鲜度；3. 完善服务流程；4. 及时处理客户反馈。'
    } else if (message.includes('库存')) {
      return '库存管理建议：1. 建立预警系统；2. 根据历史数据预测需求；3. 定期盘点避免浪费。'
    } else {
      return '感谢您的问题。我目前无法连接到AI服务，但您可以通过菜单查看相关管理功能，或联系客服获得帮助。'
    }
  }

  private handleKeydown(event: KeyboardEvent) {
    if (event.key === 'Enter') {
      if (event.shiftKey) {
        // Shift + Enter: 换行
        // 让默认行为执行（换行）
      } else {
        // 仅 Enter: 发送消息
        event.preventDefault()
        this.sendMessage()
      }
    }
  }

  private addNewLine() {
    this.currentMessage += '\n'
  }

  private clearChat() {
    this.$confirm('确定要清空所有对话记录吗？', '确认操作', {
      confirmButtonText: '确定',
      cancelButtonText: '取消',
      type: 'warning'
    }).then(async () => {
      try {
        // 如果有对话ID，调用API清空服务器端记录
        if (this.currentConversationId) {
          await clearChatHistory(this.currentConversationId)
        }

        // 清空本地记录
        this.messages = []
        this.messageCount = 0
        this.currentConversationId = ''

        this.$message({
          type: 'success',
          message: '对话已清空'
        })
      } catch (error) {
        console.error('清空聊天记录失败:', error)
        // 即使API调用失败，也清空本地记录
        this.messages = []
        this.messageCount = 0
        this.currentConversationId = ''

        this.$message({
          type: 'success',
          message: '本地对话已清空'
        })
      }
    }).catch(() => {
      // 用户取消
    })
  }

  private copyMessage(content: string) {
    navigator.clipboard.writeText(content).then(() => {
      this.$message({
        type: 'success',
        message: '内容已复制到剪贴板'
      })
    }).catch(() => {
      this.$message({
        type: 'error',
        message: '复制失败'
      })
    })
  }

  private likeMessage(message: Message) {
    this.$message({
      type: 'success',
      message: '感谢您的反馈！'
    })
  }

  private formatTime(timestamp: Date): string {
    const now = new Date()
    const diff = now.getTime() - timestamp.getTime()

    if (diff < 60000) {
      return '刚刚'
    } else if (diff < 3600000) {
      return `${Math.floor(diff / 60000)}分钟前`
    } else if (diff < 86400000) {
      return `${Math.floor(diff / 3600000)}小时前`
    } else {
      return timestamp.toLocaleDateString()
    }
  }

  // 格式化文本内容，保留空白和换行
  private formatTextContent(content: string): string {
    if (!content) return ''

    // 将换行符转换为 <br> 标签，保留空格
    return content
      .replace(/\n/g, '<br>')
      .replace(/  /g, '&nbsp;&nbsp;') // 将双空格转换为不间断空格
      .replace(/\t/g, '&nbsp;&nbsp;&nbsp;&nbsp;') // 将制表符转换为4个不间断空格
  }

  private scrollToBottom() {
    const container = this.$refs.messagesContainer as HTMLElement
    if (container) {
      container.scrollTop = container.scrollHeight
    }
  }

  // 处理查看订单详情
  private handleViewOrderDetail(row: any) {
    console.log('查看订单详情:', row)
    this.$message({
      type: 'info',
      message: `查看订单：${row.number || row.id}`
    })
    // 这里可以添加跳转到订单详情页面的逻辑
    // this.$router.push({ path: '/orderDetails', query: { id: row.id } })
  }
}
</script>

<style lang="scss" scoped>
@import '@/styles/_variables.scss';

.ai-chat-container {
  height: calc(100vh - 84px);
  display: flex;
  flex-direction: column;
  background: #fafafb;
}

.chat-header {
  background: #fff;
  border-bottom: 1px solid #ebeef5;
  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);

  .header-content {
    padding: 16px 24px;
    display: flex;
    justify-content: space-between;
    align-items: center;

    .title-section {
      display: flex;
      align-items: center;

      i {
        font-size: 24px;
        color: $mine;
        margin-right: 12px;
      }

      h2 {
        margin: 0;
        font-size: 18px;
        font-weight: 600;
        color: #20232a;
      }
    }

    .status-section {
      display: flex;
      align-items: center;
      gap: 16px;

      .message-badge {
        cursor: pointer;

        i {
          font-size: 20px;
          color: #909399;
        }
      }

      .online-status {
        display: flex;
        align-items: center;
        font-size: 14px;
        color: #67c23a;

        .status-dot {
          width: 8px;
          height: 8px;
          background: #67c23a;
          border-radius: 50%;
          margin-right: 6px;
          animation: pulse 2s infinite;
        }
      }
    }
  }
}

.chat-body {
  flex: 1;
  overflow: hidden;

  .messages-container {
    height: 100%;
    overflow-y: auto;
    padding: 20px;
    scroll-behavior: smooth;

    &::-webkit-scrollbar {
      width: 6px;
    }

    &::-webkit-scrollbar-track {
      background: #f1f1f1;
      border-radius: 3px;
    }

    &::-webkit-scrollbar-thumb {
      background: #c0c4cc;
      border-radius: 3px;

      &:hover {
        background: #909399;
      }
    }
  }

  .welcome-message {
    text-align: center;
    padding: 60px 20px;

    .welcome-icon {
      margin-bottom: 20px;

      i {
        font-size: 64px;
        color: $mine;
      }
    }

    h3 {
      margin: 0 0 12px 0;
      color: #20232a;
      font-size: 24px;
      font-weight: 600;
    }

    p {
      margin: 0 0 30px 0;
      color: #818693;
      font-size: 16px;
      line-height: 1.5;
    }

    .quick-questions {
      display: flex;
      flex-wrap: wrap;
      justify-content: center;
      gap: 12px;

      .quick-question-tag {
        cursor: pointer;
        padding: 8px 16px;
        border-radius: 20px;
        background: #fff;
        border: 1px solid #e4e7ed;
        color: #818693;
        transition: all 0.3s;

        &:hover {
          background: $mine;
          color: #fff;
          border-color: $mine;
          transform: translateY(-2px);
        }
      }
    }
  }

  .message-item {
    margin-bottom: 20px;

    .message {
      display: flex;
      align-items: flex-start;
      gap: 12px;

      &.user-message {
        flex-direction: row-reverse;
        justify-content: flex-start;

        .message-content {
          text-align: right;
          display: flex;
          flex-direction: column;
          align-items: flex-end;
          flex: 0 1 auto;
        }

        .message-bubble {
          display: inline-block;
          max-width: fit-content;
        }

        .message-avatar {
          margin-left: 0;
          margin-right: 0;
        }

        .user-bubble {
          background: $mine;
          color: #fff;
          border-radius: 18px 18px 6px 18px;
        }
      }

      &.ai-message {
        .message-content {
          flex: 0 1 auto;
        }

        .ai-bubble {
          background: #fff;
          color: #20232a;
          border: 1px solid #e4e7ed;
          border-radius: 18px 18px 18px 6px;
          box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
          display: inline-block;
          max-width: 100%;
        }
      }

      .message-content {
        flex: 0 1 auto;
        max-width: 70%;
        min-width: 0;

        .message-bubble {
          padding: 12px 16px;
          word-wrap: break-word;
          font-size: 14px;
          line-height: 1.5;
          margin-bottom: 6px;
          display: inline-block;
          max-width: 100%;

          .typing-indicator {
            display: flex;
            align-items: center;
            gap: 4px;

            .typing-dot {
              width: 6px;
              height: 6px;
              background: #909399;
              border-radius: 50%;
              animation: typing 1.4s infinite ease-in-out;

              &:nth-child(1) { animation-delay: -0.32s; }
              &:nth-child(2) { animation-delay: -0.16s; }
            }
          }
        }

        .message-time {
          font-size: 12px;
          color: #bac0cd;
          margin-bottom: 6px;
        }

        .message-actions {
          display: flex;
          gap: 8px;

          .el-button {
            padding: 4px 8px;
            font-size: 12px;
            color: #909399;

            &:hover {
              color: $mine;
            }
          }
        }

        /* .text-content {
          white-space: pre-wrap;
          word-break: break-word;
          font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
          line-height: 1.6;
        } */

        .table-content,
        .chart-content {
          min-width: 600px;

          .table-placeholder,
          .chart-placeholder {
            text-align: center;
            padding: 20px;
            background: #f8f9fa;
            border-radius: 8px;
            border: 1px dashed #d0d7de;

            i {
              font-size: 32px;
              color: #909399;
              margin-bottom: 8px;
              display: block;
            }

            p {
              margin: 0 0 12px 0;
              color: #606266;
              font-size: 14px;
            }

            .raw-data {
              text-align: left;
              background: #fff;
              padding: 12px;
              border-radius: 4px;
              font-family: monospace;
              font-size: 12px;
              color: #666;
              max-height: 200px;
              overflow-y: auto;
              border: 1px solid #e4e7ed;
            }
          }
        }
      }

      .message-avatar {
        flex-shrink: 0;
      }
    }
  }
}

.chat-input {
  background: #fff;
  border-top: 1px solid #ebeef5;
  padding: 16px 24px;

  .input-wrapper {
    display: flex;
    align-items: flex-end;
    gap: 12px;

    .message-input {
      flex: 1;

      ::v-deep .el-textarea__inner {
        border-radius: 20px;
        border: 1px solid #e4e7ed;
        padding: 12px 16px;
        font-size: 14px;
        resize: none;

        &:focus {
          border-color: $mine;
        }
      }
    }

    .input-actions {
      display: flex;
      align-items: center;
      gap: 8px;

      .el-button {
        border-radius: 20px;

        &.el-button--primary {
          background-color: $mine;
          border-color: $mine;

          &:hover {
            background-color: #fdd24c;
            border-color: #fdd24c;
          }

          &:disabled {
            background-color: #fbe396;
            border-color: #fbe396;
          }
        }
      }
    }
  }
}

@keyframes pulse {
  0%, 100% {
    opacity: 1;
  }
  50% {
    opacity: 0.5;
  }
}

@keyframes typing {
  0%, 80%, 100% {
    transform: scale(0);
  }
  40% {
    transform: scale(1);
  }
}

// 响应式设计
@media (max-width: 768px) {
  .ai-chat-container {
    height: calc(100vh - 60px);
  }

  .chat-header .header-content {
    padding: 12px 16px;

    .title-section h2 {
      font-size: 16px;
    }
  }

  .chat-body .messages-container {
    padding: 16px;
  }

  .chat-input {
    padding: 12px 16px;
  }

  .message .message-content {
    max-width: 85%;
  }

  .welcome-message {
    padding: 40px 16px;

    .welcome-icon i {
      font-size: 48px;
    }

    h3 {
      font-size: 20px;
    }

    p {
      font-size: 14px;
    }

    .quick-questions {
      .quick-question-tag {
        padding: 6px 12px;
        font-size: 13px;
      }
    }
  }
}
</style>
